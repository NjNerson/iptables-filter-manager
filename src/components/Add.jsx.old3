import React, { useEffect } from "react";
import { useForm, Controller } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { z } from "zod";
import Selection from "./Selection";
import { SelectItem } from "./ui/select";
import { IoAddSharp } from "react-icons/io5";
import { Input } from "./ui/input";
import { Label } from "./ui/label";
import { Button } from "./ui/button";
import Badge from "./Badge";

// Define the Zod schema for validation
const schema = z.object({
  chain: z.string().nonempty("Chain is required"),
  sip: z.string().optional(),
  rsip: z.string().optional(),
  rdip: z.string().optional(),
  dip: z.string().optional(),
  rdip2: z.string().optional(),
  protocol: z.string().optional(),
  sport: z.string().optional(),
  rsport: z.string().optional(),
  rsport2: z.string().optional(),
  dport: z.string().optional(),
  rdport: z.string().optional(),
  rdport2: z.string().optional(),
  target: z.string().nonempty("Target is required"),
});

const Add = () => {
  const {
    control,
    handleSubmit,
    watch,
    setValue,
    register,
    formState: { errors },
  } = useForm({
    resolver: zodResolver(schema),
  });

  const onSubmit = (data) => {
    console.log(data);
    // Handle form submission
  };

  const SIP = watch("sip");
  const DIP = watch("dip");
  const RSIP = watch("rsip");
  const RDIP = watch("rdip");
  const PRO = watch("protocol");
  const SPORT = watch("sport");
  const RSPORT = watch("rsport");
  const DPORT = watch("dport");
  const RDPORT = watch("rdport");
  const RSPORT2 = watch("rsport2");
  const RDPORT2 = watch("rdport2");

  useEffect(() => {
    if (RSIP) setValue("sip", "");
  }, [RSIP, setValue]);

  useEffect(() => {
    if (RDIP) setValue("dip", "");
  }, [RDIP, setValue]);

  useEffect(() => {
    if (RSPORT) setValue("sport", "");
  }, [RSPORT, setValue]);

  useEffect(() => {
    if (RDPORT) setValue("dport", "");
  }, [RDPORT, setValue]);

  return (
    <>
      <form onSubmit={handleSubmit(onSubmit)}>
        <div className="params w-full py-4 ">
          <h1 className="text-red-400">Parameters :</h1>
          <div className="flex flex-wrap gap-y-2 p-2">
            <Badge
              value="source ip"
              setActive={() => setValue("sip", "")}
              active={SIP}
            />
            <Badge
              value="destination ip"
              setActive={() => setValue("dip", "")}
              active={DIP}
            />
            <Badge
              value="source port"
              setActive={() => setValue("sport", "")}
              active={SPORT}
            />
            <Badge
              value="destination port"
              setActive={() => setValue("dport", "")}
              active={DPORT}
            />
            <Badge
              value="range source port"
              setActive={() => setValue("rsport", "")}
              active={RSPORT}
            />
            <Badge
              value="range destination port"
              setActive={() => setValue("rdport", "")}
              active={RDPORT}
            />
            <Badge
              value="protocol"
              setActive={() => setValue("protocol", "")}
              active={PRO}
            />
            <Badge
              value="range source ip"
              setActive={() => setValue("rsip", "")}
              active={RSIP}
            />
            <Badge
              value="range destination ip"
              setActive={() => setValue("rdip", "")}
              active={RDIP}
            />
          </div>
        </div>
        <hr className="border-slate-200" />
        <div className="Form pt-5">
          {/* CHAIN */}
          <div className="fields-m-5">
            <Label className="text-slate-800" htmlFor="chain">
              Chain
            </Label>
            <Controller
              name="chain"
              control={control}
              render={({ field }) => (
                <Selection id="chain" holder={"CHAIN"} {...field}>
                  <SelectItem value="INPUT">INPUT</SelectItem>
                  <SelectItem value="OUTPUT">OUTPUT</SelectItem>
                  <SelectItem value="FORWARD">FORWARD</SelectItem>
                </Selection>
              )}
            />
            {errors.chain && (
              <p className="text-red-500">{errors.chain.message}</p>
            )}
          </div>
          {/* SIP */}
          {SIP && (
            <div className="pt-2 flex flex-wrap pl-5">
              <div className="fields-m-5">
                <Label className="text-slate-800" htmlFor="sip">
                  Source IP
                </Label>
                <Input
                  id="sip"
                  type="text"
                  className=" w-80 fields-shadow"
                  placeholder="192.168.53.103 or 192.168.0.0/24"
                  {...register("sip")}
                />
                {errors.sip && (
                  <p className="text-red-500">{errors.sip.message}</p>
                )}
              </div>
            </div>
          )}

          {RSIP && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="rsip">
                Range Source IP
              </Label>
              <Input
                id="rsip"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="192.168.53.103"
                {...register("rsip")}
              />
              <Input
                id="rsip2"
                type="text"
                className=" w-80 mt-2 fields-shadow"
                placeholder="192.168.53.224"
                {...register("rsip2")}
              />
              {errors.rsip && (
                <p className="text-red-500">{errors.rsip.message}</p>
              )}
            </div>
          )}

          {DIP && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="dip">
                Destination IP
              </Label>
              <Input
                id="dip"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="192.168.53.103 or 192.168.0.0/24"
                {...register("dip")}
              />
              {errors.dip && (
                <p className="text-red-500">{errors.dip.message}</p>
              )}
            </div>
          )}

          {RDIP && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="rdip">
                Range Destination IP
              </Label>
              <Input
                id="rdip"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="192.168.53.103"
                {...register("rdip")}
              />
              <Input
                id="rdip2"
                type="text"
                className=" w-80 mt-2 fields-shadow"
                placeholder="192.168.53.224"
                {...register("rdip2")}
              />
              {errors.rdip && (
                <p className="text-red-500">{errors.rdip.message}</p>
              )}
            </div>
          )}

          {PRO && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="protocol">
                Protocol
              </Label>
              <Input
                id="protocol"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="ex: tcp"
                {...register("protocol")}
              />
              {errors.protocol && (
                <p className="text-red-500">{errors.protocol.message}</p>
              )}
            </div>
          )}

          {SPORT && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="sport">
                Source Port
              </Label>
              <Input
                id="sport"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="23"
                {...register("sport")}
              />
              {errors.sport && (
                <p className="text-red-500">{errors.sport.message}</p>
              )}
            </div>
          )}

          {RSPORT && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="rsport">
                Range Source Port
              </Label>
              <Input
                id="rsport"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="1000"
                {...register("rsport")}
              />
              <Input
                id="rsport2"
                type="text"
                className=" w-80 mt-2 fields-shadow"
                placeholder="2000"
                {...register("rsport2")}
              />
              {errors.rsport && (
                <p className="text-red-500">{errors.rsport.message}</p>
              )}
            </div>
          )}

          {DPORT && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="dport">
                Destination Port
              </Label>
              <Input
                id="dport"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="53"
                {...register("dport")}
              />
              {errors.dport && (
                <p className="text-red-500">{errors.dport.message}</p>
              )}
            </div>
          )}

          {RDPORT && (
            <div className="fields-m-5">
              <Label className="text-slate-800" htmlFor="rdport">
                Range Destination Port
              </Label>
              <Input
                id="rdport"
                type="text"
                className=" w-80 fields-shadow"
                placeholder="1000"
                {...register("rdport")}
              />
              <Input
                id="rdport2"
                type="text"
                className=" w-80 mt-2 fields-shadow"
                placeholder="2000"
                {...register("rdport2")}
              />
              {errors.rdport && (
                <p className="text-red-500">{errors.rdport.message}</p>
              )}
            </div>
          )}
        </div>

        <div className="fields-m-5 mt-5">
          <Label className="text-slate-800" htmlFor="target">
            Target
          </Label>
          <Controller
            name="target"
            control={control}
            render={({ field }) => (
              <Selection id="target" holder={"TARGET"} {...field}>
                <SelectItem value="ACCEPT">ACCEPT</SelectItem>
                <SelectItem value="DROP">DROP</SelectItem>
                <SelectItem value="REJECT">REJECT</SelectItem>
              </Selection>
            )}
          />
          {errors.target && (
            <p className="text-red-500">{errors.target.message}</p>
          )}
        </div>

        <div className="py-5">
          <Button type="submit">
            <IoAddSharp className="size-5" /> Add rule
          </Button>
        </div>
      </form>
    </>
  );
};

export default Add;
